bash
Copy
pip install Flask peewee matplotlib pandas plotly

csharp
Copy
fitness_project/
│
├── app.py              # Flask lietotne
├── models.py           # Datubāzes modeļi
├── templates/          # HTML šabloni
│   ├── index.html
│   ├── activity_view.html
│   ├── health_view.html
│   └── upload.html
├── static/             # Statiskie faili (CSS, JavaScript)
│   └── style.css
├── uploads/            # CSV faili
└── requirements.txt    # Atkarību fails

python
Copy
from flask import Flask, render_template, request, redirect, url_for
from models import Activity, Health, create_db
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from io import BytesIO
import base64

app = Flask(__name__)

# Izveidot datubāzi, ja tās vēl nav
create_db()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/activities')
def activity_view():
    activities = Activity.select()
    return render_template('activity_view.html', activities=activities)

@app.route('/health')
def health_view():
    health = Health.select()
    return render_template('health_view.html', health=health)

@app.route('/graphs')
def graph_view():
    # Datu sagatavošana aktivitātēm
    activities = Activity.select()
    df = pd.DataFrame([(a.date, a.steps, a.calories) for a in activities], columns=["Date", "Steps", "Calories"])
    
    # Izveidojiet grafiku
    fig = plt.figure(figsize=(6, 4))
    plt.plot(df['Date'], df['Steps'], label="Steps")
    plt.plot(df['Date'], df['Calories'], label="Calories", linestyle='--')
    plt.title("Physical Activity Over Time")
    plt.xlabel("Date")
    plt.ylabel("Value")
    plt.legend()
    
    # Saglabājiet grafiku un pārveidojiet to par attēlu
    img = BytesIO()
    fig.savefig(img, format='png')
    img.seek(0)
    plot_url = base64.b64encode(img.getvalue()).decode('utf8')
    
    return render_template('graph_view.html', plot_url=plot_url)

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files['file']
        if file:
            df = pd.read_csv(file)
            for _, row in df.iterrows():
                if 'steps' in row and 'calories' in row:
                    Activity.create(date=row['date'], steps=row['steps'], calories=row['calories'])
                if 'weight' in row and 'bp' in row:
                    Health.create(date=row['date'], weight=row['weight'], blood_pressure=row['bp'])
            return redirect(url_for('activity_view'))
    return render_template('upload.html')

if __name__ == '__main__':
    app.run(debug=True)

python
Copy
from peewee import *
import os

db = SqliteDatabase('fitness_data.db')

class Activity(Model):
    date = DateField()
    steps = IntegerField()
    calories = FloatField()

    class Meta:
        database = db

class Health(Model):
    date = DateField()
    weight = FloatField()
    blood_pressure = CharField()

    class Meta:
        database = db

def create_db():
    if not os.path.exists('fitness_data.db'):
        db.connect()
        db.create_tables([Activity, Health])

index.html
Pamatsākuma lapa:

html
Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Fitness and Health Tracker</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <h1>Welcome to the Fitness and Health Tracker</h1>
    <a href="{{ url_for('activity_view') }}">View Activities</a><br>
    <a href="{{ url_for('health_view') }}">View Health Data</a><br>
    <a href="{{ url_for('graph_view') }}">View Graphs</a><br>
    <a href="{{ url_for('upload_file') }}">Upload CSV</a>
</body>
</html>
activity_view.html
Skats aktivitātes datiem:

html
Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Activity View</title>
</head>
<body>
    <h1>Activity Data</h1>
    <table border="1">
        <tr>
            <th>Date</th>
            <th>Steps</th>
            <th>Calories</th>
        </tr>
        {% for activity in activities %}
        <tr>
            <td>{{ activity.date }}</td>
            <td>{{ activity.steps }}</td>
            <td>{{ activity.calories }}</td>
        </tr>
        {% endfor %}
    </table>
    <a href="{{ url_for('index') }}">Back to Home</a>
</body>
</html>
health_view.html
Skats veselības datiem:

html
Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Health View</title>
</head>
<body>
    <h1>Health Data</h1>
    <table border="1">
        <tr>
            <th>Date</th>
            <th>Weight</th>
            <th>Blood Pressure</th>
        </tr>
        {% for health in health %}
        <tr>
            <td>{{ health.date }}</td>
            <td>{{ health.weight }}</td>
            <td>{{ health.blood_pressure }}</td>
        </tr>
        {% endfor %}
    </table>
    <a href="{{ url_for('index') }}">Back to Home</a>
</body>
</html>
graph_view.html
Skats grafiku:

html
Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Graphs View</title>
</head>
<body>
    <h1>Graphs</h1>
    <img src="data:image/png;base64,{{ plot_url }}" alt="Graph">
    <a href="{{ url_for('index') }}">Back to Home</a>
</body>
</html>
upload.html
Lapa CSV faila augšupielādei:

html
Copy
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Upload CSV</title>
</head>
<body>
    <h1>Upload CSV File</h1>
    <form action="{{ url_for('upload_file') }}" method="POST" enctype="multipart/form-data">
        <input type="file" name="file" accept=".csv" required><br>
        <button type="submit">Upload</button>
    </form>
    <a href="{{ url_for('index') }}">Back to Home</a>
</body>
</html>
6. Stils (static/style.css)
Pamata stili.

css
Copy
body {
    font-family: Arial, sans-serif;
    padding: 20px;
}

a {
    display: block;
    margin-top: 10px;
}

table {
    width: 100%;
    border-collapse: collapse;
}

table, th, td {
    border: 1px solid black;
}

th, td {
    padding: 8px;
    text-align: center;
}
7. CSV datu paraugs
Piemēram, CSV fails, kuru varat augšupielādēt:

csv
Copy
date,steps,calories
2025-02-01,8000,250
2025-02-02,9500,300
2025-02-03,12000,400
8. Palaist lietotni
Tagad varat palaist lietotni:

bash
Copy
python app.py
Lietotne būs pieejama vietējā serverī (http://127.0.0.1:5000/), kur lietotāji varēs apskatīt datus, augšupielādēt CSV failus, skatīt grafikus un veikt citas darbības.




